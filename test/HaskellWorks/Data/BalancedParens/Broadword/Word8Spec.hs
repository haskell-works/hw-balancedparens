{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE ScopedTypeVariables #-}

module HaskellWorks.Data.BalancedParens.Broadword.Word8Spec where

import HaskellWorks.Data.Bits.BitRead
import HaskellWorks.Hspec.Hedgehog
import Hedgehog
import Test.Hspec

import qualified HaskellWorks.Data.BalancedParens.Broadword.Word8 as W8

{-# ANN module ("HLint: ignore Redundant do"        :: String) #-}
{-# ANN module ("HLint: ignore Reduce duplication"  :: String) #-}

spec :: Spec
spec = describe "HaskellWorks.Data.BalancedParens.Broadword.Word8Spec" $ do
  describe "findCloseFar" $ do
    it "00000000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000000") === Just 0
    it "10000000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000000") === Just 2
    it "01000000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000000") === Just 0
    it "11000000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000000") === Just 4
    it "00100000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100000") === Just 0
    it "10100000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100000") === Just 4
    it "01100000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100000") === Just 0
    it "11100000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100000") === Just 6
    it "00010000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010000") === Just 0
    it "10010000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010000") === Just 2
    it "01010000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010000") === Just 0
    it "11010000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010000") === Just 6
    it "00110000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110000") === Just 0
    it "10110000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110000") === Just 6
    it "01110000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110000") === Just 0
    it "11110000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110000") === Just 8
    it "00001000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001000") === Just 0
    it "10001000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001000") === Just 2
    it "01001000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001000") === Just 0
    it "11001000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001000") === Just 6
    it "00101000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101000") === Just 0
    it "10101000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101000") === Just 6
    it "01101000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101000") === Just 0
    it "11101000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101000") === Just 8
    it "00011000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011000") === Just 0
    it "10011000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011000") === Just 2
    it "01011000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011000") === Just 0
    it "11011000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011000") === Just 8
    it "00111000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111000") === Just 0
    it "10111000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111000") === Just 8
    it "01111000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111000") === Just 0
    it "11111000" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111000") === Just 10
    it "00000100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000100") === Just 0
    it "10000100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000100") === Just 2
    it "01000100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000100") === Just 0
    it "11000100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000100") === Just 4
    it "00100100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100100") === Just 0
    it "10100100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100100") === Just 4
    it "01100100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100100") === Just 0
    it "11100100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100100") === Just 8
    it "00010100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010100") === Just 0
    it "10010100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010100") === Just 2
    it "01010100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010100") === Just 0
    it "11010100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010100") === Just 8
    it "00110100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110100") === Just 0
    it "10110100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110100") === Just 8
    it "01110100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110100") === Just 0
    it "11110100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110100") === Just 10
    it "00001100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001100") === Just 0
    it "10001100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001100") === Just 2
    it "01001100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001100") === Just 0
    it "11001100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001100") === Just 8
    it "00101100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101100") === Just 0
    it "10101100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101100") === Just 8
    it "01101100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101100") === Just 0
    it "11101100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101100") === Just 10
    it "00011100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011100") === Just 0
    it "10011100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011100") === Just 2
    it "01011100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011100") === Just 0
    it "11011100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011100") === Just 10
    it "00111100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111100") === Just 0
    it "10111100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111100") === Just 10
    it "01111100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111100") === Just 0
    it "11111100" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111100") === Just 12
    it "00000010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000010") === Just 0
    it "10000010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000010") === Just 2
    it "01000010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000010") === Just 0
    it "11000010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000010") === Just 4
    it "00100010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100010") === Just 0
    it "10100010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100010") === Just 4
    it "01100010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100010") === Just 0
    it "11100010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100010") === Just 8
    it "00010010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010010") === Just 0
    it "10010010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010010") === Just 2
    it "01010010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010010") === Just 0
    it "11010010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010010") === Just 8
    it "00110010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110010") === Just 0
    it "10110010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110010") === Just 8
    it "01110010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110010") === Just 0
    it "11110010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110010") === Just 10
    it "00001010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001010") === Just 0
    it "10001010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001010") === Just 2
    it "01001010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001010") === Just 0
    it "11001010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001010") === Just 8
    it "00101010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101010") === Just 0
    it "10101010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101010") === Just 8
    it "01101010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101010") === Just 0
    it "11101010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101010") === Just 10
    it "00011010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011010") === Just 0
    it "10011010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011010") === Just 2
    it "01011010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011010") === Just 0
    it "11011010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011010") === Just 10
    it "00111010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111010") === Just 0
    it "10111010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111010") === Just 10
    it "01111010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111010") === Just 0
    it "11111010" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111010") === Just 12
    it "00000110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000110") === Just 0
    it "10000110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000110") === Just 2
    it "01000110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000110") === Just 0
    it "11000110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000110") === Just 4
    it "00100110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100110") === Just 0
    it "10100110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100110") === Just 4
    it "01100110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100110") === Just 0
    it "11100110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100110") === Just 10
    it "00010110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010110") === Just 0
    it "10010110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010110") === Just 2
    it "01010110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010110") === Just 0
    it "11010110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010110") === Just 10
    it "00110110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110110") === Just 0
    it "10110110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110110") === Just 10
    it "01110110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110110") === Just 0
    it "11110110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110110") === Just 12
    it "00001110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001110") === Just 0
    it "10001110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001110") === Just 2
    it "01001110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001110") === Just 0
    it "11001110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001110") === Just 10
    it "00101110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101110") === Just 0
    it "10101110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101110") === Just 10
    it "01101110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101110") === Just 0
    it "11101110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101110") === Just 12
    it "00011110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011110") === Just 0
    it "10011110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011110") === Just 2
    it "01011110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011110") === Just 0
    it "11011110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011110") === Just 12
    it "00111110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111110") === Just 0
    it "10111110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111110") === Just 12
    it "01111110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111110") === Just 0
    it "11111110" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111110") === Just 14
    it "00000001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000001") === Just 0
    it "10000001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000001") === Just 2
    it "01000001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000001") === Just 0
    it "11000001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000001") === Just 4
    it "00100001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100001") === Just 0
    it "10100001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100001") === Just 4
    it "01100001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100001") === Just 0
    it "11100001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100001") === Just 6
    it "00010001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010001") === Just 0
    it "10010001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010001") === Just 2
    it "01010001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010001") === Just 0
    it "11010001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010001") === Just 6
    it "00110001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110001") === Just 0
    it "10110001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110001") === Just 6
    it "01110001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110001") === Just 0
    it "11110001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110001") === Just 10
    it "00001001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001001") === Just 0
    it "10001001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001001") === Just 2
    it "01001001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001001") === Just 0
    it "11001001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001001") === Just 6
    it "00101001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101001") === Just 0
    it "10101001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101001") === Just 6
    it "01101001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101001") === Just 0
    it "11101001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101001") === Just 10
    it "00011001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011001") === Just 0
    it "10011001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011001") === Just 2
    it "01011001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011001") === Just 0
    it "11011001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011001") === Just 10
    it "00111001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111001") === Just 0
    it "10111001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111001") === Just 10
    it "01111001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111001") === Just 0
    it "11111001" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111001") === Just 12
    it "00000101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000101") === Just 0
    it "10000101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000101") === Just 2
    it "01000101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000101") === Just 0
    it "11000101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000101") === Just 4
    it "00100101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100101") === Just 0
    it "10100101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100101") === Just 4
    it "01100101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100101") === Just 0
    it "11100101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100101") === Just 10
    it "00010101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010101") === Just 0
    it "10010101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010101") === Just 2
    it "01010101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010101") === Just 0
    it "11010101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010101") === Just 10
    it "00110101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110101") === Just 0
    it "10110101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110101") === Just 10
    it "01110101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110101") === Just 0
    it "11110101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110101") === Just 12
    it "00001101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001101") === Just 0
    it "10001101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001101") === Just 2
    it "01001101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001101") === Just 0
    it "11001101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001101") === Just 10
    it "00101101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101101") === Just 0
    it "10101101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101101") === Just 10
    it "01101101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101101") === Just 0
    it "11101101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101101") === Just 12
    it "00011101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011101") === Just 0
    it "10011101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011101") === Just 2
    it "01011101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011101") === Just 0
    it "11011101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011101") === Just 12
    it "00111101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111101") === Just 0
    it "10111101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111101") === Just 12
    it "01111101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111101") === Just 0
    it "11111101" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111101") === Just 14
    it "00000011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000011") === Just 0
    it "10000011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000011") === Just 2
    it "01000011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000011") === Just 0
    it "11000011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000011") === Just 4
    it "00100011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100011") === Just 0
    it "10100011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100011") === Just 4
    it "01100011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100011") === Just 0
    it "11100011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100011") === Just 10
    it "00010011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010011") === Just 0
    it "10010011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010011") === Just 2
    it "01010011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010011") === Just 0
    it "11010011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010011") === Just 10
    it "00110011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110011") === Just 0
    it "10110011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110011") === Just 10
    it "01110011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110011") === Just 0
    it "11110011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110011") === Just 12
    it "00001011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001011") === Just 0
    it "10001011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001011") === Just 2
    it "01001011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001011") === Just 0
    it "11001011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001011") === Just 10
    it "00101011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101011") === Just 0
    it "10101011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101011") === Just 10
    it "01101011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101011") === Just 0
    it "11101011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101011") === Just 12
    it "00011011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011011") === Just 0
    it "10011011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011011") === Just 2
    it "01011011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011011") === Just 0
    it "11011011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011011") === Just 12
    it "00111011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111011") === Just 0
    it "10111011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111011") === Just 12
    it "01111011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111011") === Just 0
    it "11111011" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111011") === Just 14
    it "00000111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00000111") === Just 0
    it "10000111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10000111") === Just 2
    it "01000111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01000111") === Just 0
    it "11000111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11000111") === Just 4
    it "00100111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00100111") === Just 0
    it "10100111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10100111") === Just 4
    it "01100111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01100111") === Just 0
    it "11100111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11100111") === Just 12
    it "00010111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00010111") === Just 0
    it "10010111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10010111") === Just 2
    it "01010111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01010111") === Just 0
    it "11010111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11010111") === Just 12
    it "00110111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00110111") === Just 0
    it "10110111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10110111") === Just 12
    it "01110111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01110111") === Just 0
    it "11110111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11110111") === Just 14
    it "00001111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00001111") === Just 0
    it "10001111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10001111") === Just 2
    it "01001111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01001111") === Just 0
    it "11001111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11001111") === Just 12
    it "00101111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00101111") === Just 0
    it "10101111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10101111") === Just 12
    it "01101111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01101111") === Just 0
    it "11101111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11101111") === Just 14
    it "00011111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00011111") === Just 0
    it "10011111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10011111") === Just 2
    it "01011111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01011111") === Just 0
    it "11011111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11011111") === Just 14
    it "00111111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "00111111") === Just 0
    it "10111111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "10111111") === Just 14
    it "01111111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "01111111") === Just 0
    it "11111111" $ requireTest $ fmap (W8.findCloseFar 0) (bitRead "11111111") === Just 16
